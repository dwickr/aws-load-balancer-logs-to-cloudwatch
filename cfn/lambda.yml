AWSTemplateFormatVersion: 2010-09-09

Parameters:

  LoadBalancerName:
    Type: String

  LoadBalancerType:
    Type: String
    AllowedValues:
      - classic
      - application
      - network

  LogsBucket:
    Type: String

  LambdaBucket:
    Type: String

  S3FileVersion:
    Type: String

Conditions:
  
  NetworkLoadBalancer:
    !Equals
      - !Ref LoadBalancerType
      - network

Resources:

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 7
      NotificationConfiguration:
        LambdaConfigurations: 
          - Event: s3:ObjectCreated:*
            Function: !Ref Lambda

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Statement:
          !If
            - NetworkLoadBalancer
            - - Effect: Allow
                Action: s3:PutObject
                Principal:
                  Service: delivery.logs.amazonaws.com
                Resource: !Sub arn:aws:s3:::${LogsBucket}/AWSLogs/${AWS::AccountId}/*
                Condition:
                  StringEquals:
                    s3:x-amz-acl: bucket-owner-full-control
              - Sid: AWSLogDeliveryAclCheck
                Effect: Allow
                Action: s3:GetBucketAcl
                Principal:
                  Service: delivery.logs.amazonaws.com
                Resource: !Sub arn:aws:s3:::${LogsBucket}
            - - Effect: Allow
                Action: s3:PutObject
                Principal:
                  AWS: 783225319266
                Resource: !Sub arn:aws:s3:::${LogsBucket}/AWSLogs/${AWS::AccountId}/*

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/elb/${LoadBalancerType}/${LoadBalancerName}
      RetentionInDays: 30

  S3EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${LogsBucket}

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          LOG_GROUP_NAME: !Ref LogGroup
          CLASSIC_ELB_MODE: 'TRUE'
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: code.zip
        S3ObjectVersion: !Ref S3FileVersion

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Ref AWS::StackName
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - xray:PutTelemetryRecords
                - xray:PutTraceSegments
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
            - Effect: Allow
              Action:
                - logs:DescribeLogStreams
                - logs:DescribeLogGroups
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub ${LogGroup.Arn}*

Outputs:

  LogsBucket:
    Value: !Ref LogsBucket